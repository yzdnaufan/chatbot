from classes.state import ConversationState

from interfaces.flow_manager import IFlowManager

from modules.balance_checker_flow import BalanceCheckFlow
from modules.fund_transfer_flow import FundTransferFlow

from utils.state import ConversationStateManager

# Simulated NLP model for intent recognition
# This could be changed to a real NLP model
def identify_intent(query):
    if "balance" in query.lower():
        return "balance_inquiry"
    elif "transfer" in query.lower():
        return "fund_transfer"
    return "unknown"

class FlowManager(IFlowManager):
    """
    The FlowManager class manages the flow of conversations in the chatbot.

    Attributes:
        state_manager (ConversationStateManager): An instance of the ConversationStateManager class.
        flow (dict): A dictionary mapping intents to specific flow handlers.

    Methods:
        reset_state(user_id): Resets the state for a specific user.
        process_query(query, session_id): Processes a user query and returns a response based on the current state and intent.
    """

    def __init__(self):
        self.state_manager = ConversationStateManager()
        self.flow = {
            "fund_transfer": FundTransferFlow(),
            "balance_inquiry": BalanceCheckFlow() 
        }

    def reset_state(self, user_id):
        """
        Resets the state for a specific user.

        Args:
            user_id (str): The ID of the user.

        Returns:
            None
        """
        self.state_manager.reset_state(user_id)
        return "Is there anything that can I help again?"

    def process_query(self, query, session):
        """
        Processes a user query and returns a response based on the current state and intent.

        Args:
            query (str): The user query.
            session (str): Session object

        Returns:
            str: The response generated by the chatbot.
        """
        intent = identify_intent(query)
        current_state = self.state_manager.get_state(session)

        # print(current_state)

        # Process the flow manager based on current state and intent
        if current_state == ConversationState.INITIAL:
            if intent in self.flow:
                flow_handler = self.flow[intent]
                response = flow_handler.execute(query, session)
                self.state_manager.set_state(session, intent)
                return response
            else:
                return "I'm sorry, I don't understand your query."
        elif current_state == ConversationState.FUND_TRANSFER:
            flow_handler = self.flow["fund_transfer"]
            response = flow_handler.execute(query, session)
            self.state_manager.set_state(session, intent)
            return response
        elif current_state == ConversationState.BALANCE_INQUIRY:
            flow_handler = self.flow["fund_transfer"]
            response = flow_handler.execute(query, session)
            self.state_manager.set_state(session, intent)
            return response





